#2021/05/20
問題文を読む
公式テスターが出力する入力がよくわからなかった、
よく読むとこれでテスターを自分で作れということらしい。
スコア計算式を見ると後半が本番なことがわかる。
探索をいかに効率よくやる問題だとして、バンディット問題のUCB方策とか使えそう。
TopcoderMMでみたことある、スロットマシーンか勝敗予想みたいなやつをあとで調べる。
やるだけ 63,179,310,956 302:38
スコアがあわない

#2021/05/23
入力受付時のバグを修正　スコアがテスターと一致。
script/sciript　で動くように修正
順位表を眺めるとバンディット問題
バンディット問題の理論とアルゴリズム（MLP)を流し読み
オンライン経路制御や経路選択最適化問題（オンライン）あたりでは（？）
ビジュアライザを見ると、s−＞ｔに向かうときグリッドを遠回りすることによる距離縮小ケースは少なそう　
（これは入力生成方法からわかるかもしれない）
方針１（前半）
ｔ点に向かう時、直後の経路は２方向に絞れる
UCB方策で決定する（このとき、その後のコストは考慮しない）
方策２
各経路のコストを推測する
このとき、全体のコスト/経路長　として、経路長を信頼度の逆とする

#2021/05/24
自転車のパンク修理
必要なログを保持するようにした
greedySolverの実装（使ってない道,距離の小さい道を優先）
submit 325	 fmhr 	77,904,778,649 (3)


#2021/05/27
h,v　を逆にしていたバグを修正

#2021/05/29
欲しいものをつくる
現在の使用エッジ数
現在の推測エッジコストと実際の誤差（テスターをいじって誤差を消したバージョンもほしい）
コストの推測の精度をあげる
1. すでに推測したコストを引いて、未推測のコストに割り当てる スコア悪化
2. 初期のキューで推測したコストを新しい情報で再測定する
3. 過去のキューを使って精度を上げていく
4. 後半でもコストの再計算をいれる
5. github actionを使う
6. wfの更新

#2021/05/30
最終日
現状把握からやる

# コンテスト終了
参加記
https://hackmd.io/@qLethon/BJnvfxZcd
https://www.notion.so/AHC003-a943eb53da824414b05c013d44d36f00
https://inaniwa.hatenablog.com/entry/2021/05/30/232500
https://tsukammo.hatenablog.com/entry/2021/05/30/214402 ダイクストラ法の改良
https://twitter.com/shr_pc/status/1398958445265440772?s=20 暫定6位
https://twitter.com/btk15049/status/1399289115128909826 btkさんのoptuna
https://twitter.com/kimiyuki_u/status/1371059321182642179 kmykさんのgithub action

# 反省
ビジュアライザをもっと活用する
テストケースの生成方法をもっと注意深く観察する
