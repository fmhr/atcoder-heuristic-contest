//package masters;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.*;

public class Main {
	static InputStream is;
	static PrintWriter out;
	static final boolean debug = false;
	static Random gen = new Random(114514);

	static String INPUT = "";

	static int limit;

	static void solve()
	{
		int seed = ni();
		if(seed >= colorbase.length || colorbase[seed] == null)throw new RuntimeException();
		int n = ni();

		char[][] vs = nm(n, n-1);
		char[][] hs = nm(n-1, n);
		int[][] as = nmi(n, n);

		boolean[][] wall = new boolean[2*n-1][2*n-1];
		for(int i = 0;i < n;i++){
			for(int j = 0;j < n-1;j++){
				if(vs[i][j] == '1'){
					wall[2*i][2*j+1] = true;
				}
			}
		}
		for(int i = 0;i < n-1;i++){
			for(int j = 0;j < n;j++){
				if(hs[i][j] == '1'){
					wall[2*i+1][2*j] = true;
				}
			}
		}

		int[][] colors = new int[n][n];
		String colorbaseStr = colorbase[seed];
		for(int i = 0;i < n;i++){
			for(int j = 0;j < n;j++){
				colors[i][j] = colorbaseStr.charAt(i * n + j) - '0';
			}
		}

		int[][] aa = new int[n][];
		for(int i = 0;i < n;i++){
			aa[i] = Arrays.copyOf(as[i], n);
		}

		dms = new int[n][n][][];
		for(int i = 0;i < n;i++){
			for(int j = 0;j < n;j++){
				dms[i][j] = distMap(wall, i, j, n, n);
			}
		}

		// 1500までマップづくり
		// 1530までマージソート

		limit = 4*n*n;

		Context res;
		long tly = 260;
		{
			List<int[]> A = makeRoute(colors, 0, 4, tly);
			List<int[]> T = makeRoute(colors, 4, 8, tly);
			res = check(A, T, as, wall);
		}
		go(0, 4, colors, wall, as, res, tly/2);
		go(4, 8, colors, wall, as, res, tly/2);
		go(6, 8, colors, wall, as, res, tly/4);
		go(4, 6, colors, wall, as, res, tly/4);
		go(2, 4, colors, wall, as, res, tly/4);
		go(0, 2, colors, wall, as, res, tly/4);

		if(res.sde.size() > limit){
			res.sde = res.sde.subList(0, limit);
		}

		if(debug){
			tr(res.sde.size());
			simulate(aa, res);
			int cost = 0;
			for(int i = 0;i < n;i++) {
				for (int j = 0; j < n; j++) {
					if (i + 1 < n && !wall[2 * i + 1][2 * j]){
						cost += (aa[i + 1][j] - aa[i][j]) * (aa[i + 1][j] - aa[i][j]);
					}
					if (j + 1 < n && !wall[2 * i][2 * j + 1]){
						cost += (aa[i][j + 1] - aa[i][j]) * (aa[i][j + 1] - aa[i][j]);
					}
				}
			}
//			for(int[] u : aa){
//				tr(u);
//			}
			print(aa, vs, hs);
			tr(cost);
		}else {
			out.println(res.pi + " " + res.pj + " " + res.qi + " " + res.qj);
			for (int[] u : res.sde) {
				out.println(u[0] + " " + (char) u[1] + " " + (char) u[2]);
			}
		}
		// 標準出力エラーで実行時間を出力
	}

	static void go(int low, int high, int[][] colors, boolean[][] wall, int[][] as, Context res, long tl)
	{
		int n = as.length;
		int h = low+high>>1;
		List<int[]> A = makeRoute(colors, low, h, tl);
		List<int[]> T = makeRoute(colors, h, high, tl);
		Context res2 = check(A, T, as, wall);
		List<Character> ar = move(res.epi, res.epj, res2.pi, res2.pj, wall, n);
		List<Character> tr = move(res.eqi, res.eqj, res2.qi, res2.qj, wall, n);
		List<int[]> merged = merge(ar, tr);
//		if(merged.size() + res2.sde.size() + res.sde.size() <= limit){
		res.sde.addAll(merged);
		res.sde.addAll(res2.sde);
		res.epi = res2.epi;
		res.epj = res2.epj;
		res.eqi = res2.eqi;
		res.eqj = res2.eqj;
//		}
	}

	static List<int[]> merge(List<Character> a, List<Character> b)
	{
		List<int[]> ret = new ArrayList<>();
		for(int i = 0;i < a.size() || i < b.size();i++){
			int x = i < a.size() ? a.get(i) : '.';
			int y = i < b.size() ? b.get(i) : '.';
			ret.add(new int[]{0, x, y});
		}
		return ret;
	}

	static List<Character> move(int fr, int fc, int tr, int tc, boolean[][] wall, int n)
	{
		int[] dr = {1, 0, -1, 0};
		int[] dc = {0, 1, 0, -1};
		List<Character> route = new ArrayList<>();

		outer:
		while(tr != fr || tc != fc) {
			for (int k = 0; k < 4; k++) {
				int r = fr + dr[k];
				int c = fc + dc[k];
				if (r >= 0 && r < n && c >= 0 && c < n && !wall[r + fr][c + fc]) {
					int[][] ds = dms[tr][tc];
					if (ds[r][c] < ds[fr][fc]) {
						route.add("DRUL".charAt(k));
						fr = r;
						fc = c;
						continue outer;
					}
				}
			}
		}
		return route;
	}

	static void print(int[][] aa, char[][] vs, char[][] hs)
	{
		int n = aa.length;

		for(int i = 0; i <= 2 * n; i++){
			for(int j = 0; j <= 2 * n; j++){
				if(i % 2 == 0 && j % 2 == 0){
					out.print("+");
				} else if(i == 0 || i == 2 * n){
					out.print("---");
				} else if(j == 0 || j == 2 * n){
					out.print("|");
				} else if(i % 2 == 0){
					if(hs[i / 2 - 1][(j - 1) / 2] == '1'){
						out.print("---");
					} else {
						out.print("   ");
					}
				} else if(j % 2 == 0){
					if(vs[(i - 1) / 2][j / 2 - 1] == '1'){
						out.print("|");
					} else {
						out.print(" ");
					}
				} else {
					int y = (i - 1) / 2;
					int x = (j - 1) / 2;
					out.print(String.format("%3d", aa[y][x]));
				}
			}
			out.println();
		}
	}

	static void simulate(int[][] aa, Context cx)
	{
		int[] dr = {1, 0, -1, 0, 0};
		int[] dc = {0, 1, 0, -1, 0};
		String D = "DRUL.";

		int r1 = cx.pi, c1 = cx.pj;
		int r2 = cx.qi, c2 = cx.qj;
		for(int[] u : cx.sde){
			if(u[0] == 1){
				assert aa[r1][c1] > aa[r2][c2];
				int d = aa[r1][c1]; aa[r1][c1] = aa[r2][c2]; aa[r2][c2] = d;
			}
			r1 += dr[D.indexOf(u[1])];
			c1 += dc[D.indexOf(u[1])];
			r2 += dr[D.indexOf(u[2])];
			c2 += dc[D.indexOf(u[2])];
		}
	}

	static class Context
	{
		int pi, pj, qi, qj;
		List<int[]> sde;
		int epi, epj, eqi, eqj;
	}

	static Context check(List<int[]> A, List<int[]> T, int[][] as, boolean[][] wall)
	{
		int n = as.length;

		int min = 9999999;
		for(int[] u : A){
			min = Math.min(min, as[u[0]][u[1]]);
		}
		for(int[] u : T){
			min = Math.min(min, as[u[0]][u[1]]);
		}
		int B = min + A.size();

		Context ret = new Context();
		ret.sde = new ArrayList<>();
		int i = -1, j = -1;
		{
			for(int k = 0;k < A.size();k++){
				if(as[A.get(k)[0]][A.get(k)[1]] >= B){
					i = k;
					break;
				}
			}
			if(i == -1){
				return ret;
			}
			for(int k = 0;k < T.size();k++){
				if(as[T.get(k)[0]][T.get(k)[1]] < B){
					j = k;
					break;
				}
			}
		}

		ret.pi = A.get(i)[0];
		ret.pj = A.get(i)[1];
		ret.qi = T.get(j)[0];
		ret.qj = T.get(j)[1];
		ret.sde = new ArrayList<>();
		int[] dr = {1, 0, -1, 0};
		int[] dc = {0, 1, 0, -1};
		char[] D = "DRUL".toCharArray();

//		tr(A.get(i), T.get(j), B, A.size(), T.size());

		while(true){
			{
				int d = as[A.get(i)[0]][A.get(i)[1]];
				as[A.get(i)[0]][A.get(i)[1]] = as[T.get(j)[0]][T.get(j)[1]];
				as[T.get(j)[0]][T.get(j)[1]] = d;
			}
//			tr(i, j);

			ret.epi = A.get(i)[0];
			ret.epj = A.get(i)[1];
			ret.eqi = T.get(j)[0];
			ret.eqj = T.get(j)[1];
			int fra = A.get(i)[0], fca = A.get(i)[1];
			int[] ta = null;
			for(int k = i;k < A.size();k++){
				if(as[A.get(k)[0]][A.get(k)[1]] >= B){
					ta = A.get(k);
					i = k;
					break;
				}
			}
			if(ta == null)break;
			int frt = T.get(j)[0], fct = T.get(j)[1];
			int[] tt = null;
			for(int k = j;k < T.size();k++){
				if(as[T.get(k)[0]][T.get(k)[1]] < B){
					tt = T.get(k);
					j = k;
					break;
				}
			}
			assert tt != null;

			boolean first = true;
			while(true){
				int da = '.';
				{
					int[][] ds = dms[ta[0]][ta[1]];
					for (int k = 0; k < 4; k++) {
						int r = fra + dr[k];
						int c = fca + dc[k];
						if (r >= 0 && r < n && c >= 0 && c < n && !wall[r + fra][c + fca]) {
							if (ds[r][c] < ds[fra][fca]) {
								fra = r;
								fca = c;
								da = D[k];
								break;
							}
						}
					}
				}
				int dt = '.';
				{
					int[][] ds = dms[tt[0]][tt[1]];
					for (int k = 0; k < 4; k++) {
						int r = frt + dr[k];
						int c = fct + dc[k];
						if (r >= 0 && r < n && c >= 0 && c < n && !wall[r + frt][c + fct]) {
							if (ds[r][c] < ds[frt][fct]) {
								frt = r;
								fct = c;
								dt = D[k];
								break;
							}
						}
					}
				}
				if(da == '.' && dt == '.'){
					break;
				}else{
					ret.sde.add(new int[]{first ? 1 : 0, da, dt});
				}
				first = false;
			}
		}
		ret.sde.add(new int[]{1, '.', '.'});
		return ret;
	}

	static int[][][][] dms;

	static List<int[]> makeRoute(int[][] colors, int low, int high, long tl)
	{
		long S = System.currentTimeMillis();
		List<int[]> poss = new ArrayList<>();
		int n = colors.length;
		for(int i = 0;i < n;i++){
			for(int j = 0;j < n;j++){
				if(colors[i][j] >= low && colors[i][j] < high){
					poss.add(new int[]{i, j});
				}
			}
		}

		int cost = cost(poss);
		int m = poss.size();
		while(System.currentTimeMillis() - S < tl){
			int x = gen.nextInt(m);
			int y = gen.nextInt(m);
			if(x == y)continue;
			int[] a = poss.get(x);
			int[] b = poss.get(y);

			int ncost = cost;
			if(x+1 < m) {
				ncost -= dms[poss.get(x)[0]][poss.get(x)[1]][poss.get(x + 1)[0]][poss.get(x + 1)[1]];
			}
			if(x-1 >= 0){
				ncost -= dms[poss.get(x)[0]][poss.get(x)[1]][poss.get(x - 1)[0]][poss.get(x - 1)[1]];
			}
			if(y+1 < m) {
				ncost -= dms[poss.get(y)[0]][poss.get(y)[1]][poss.get(y + 1)[0]][poss.get(y + 1)[1]];
			}
			if(y-1 >= 0){
				ncost -= dms[poss.get(y)[0]][poss.get(y)[1]][poss.get(y - 1)[0]][poss.get(y - 1)[1]];
			}
			poss.set(x, b);
			poss.set(y, a);
			if(x+1 < m) {
				ncost += dms[poss.get(x)[0]][poss.get(x)[1]][poss.get(x + 1)[0]][poss.get(x + 1)[1]];
			}
			if(x-1 >= 0){
				ncost += dms[poss.get(x)[0]][poss.get(x)[1]][poss.get(x - 1)[0]][poss.get(x - 1)[1]];
			}
			if(y+1 < m) {
				ncost += dms[poss.get(y)[0]][poss.get(y)[1]][poss.get(y + 1)[0]][poss.get(y + 1)[1]];
			}
			if(y-1 >= 0){
				ncost += dms[poss.get(y)[0]][poss.get(y)[1]][poss.get(y - 1)[0]][poss.get(y - 1)[1]];
			}
//			int xcost = cost(poss);
//			assert ncost == xcost;
			if(ncost <= cost){
				cost = ncost;
			}else{
				poss.set(x, a);
				poss.set(y, b);
			}
		}
		return poss;
	}

	static int cost(List<int[]> route)
	{
		int ret = 0;
		for(int i = 0;i < route.size()-1;i++){
			ret += dms[route.get(i)[0]][route.get(i)[1]][route.get(i+1)[0]][route.get(i+1)[1]];
		}
		return ret;
	}

	public static int[][] distMap(boolean[][] wall, int sr, int sc, int n, int m)
	{
		int[] dr = { 1, 0, -1, 0 };
		int[] dc = { 0, 1, 0, -1 };
		if(n == 0)return new int[0][0];

		int[][] d = new int[n][m];
		int I = 999999999;
		for(int i = 0;i < n;i++) {
			Arrays.fill(d[i], I);
		}

		Queue<int[]> q = new ArrayDeque<>();
		q.add(new int[]{sr, sc});
		d[sr][sc] = 0;

		while(!q.isEmpty()){
			int[] cur = q.poll();
			int r = cur[0], c = cur[1];
			for(int k = 0;k < dr.length;k++) {
				int nr = r + dr[k], nc = c + dc[k];
				if(nr >= 0 && nr < n && nc >= 0 && nc < m){
					if(!wall[r+nr][c+nc] && d[nr][nc] > d[r][c] + 1) {
						d[nr][nc] = d[r][c] + 1;
						q.add(new int[]{nr, nc});
					}
				}
			}
		}
		return d;
	}

	public static int[] shuffle(int n, Random gen){ int[] a = new int[n]; for(int i = 0;i < n;i++)a[i] = i; for(int i = 0;i < n;i++){ int ind = gen.nextInt(n-i)+i; int d = a[i]; a[i] = a[ind]; a[ind] = d; } return a; }

	static String[] colorbase = {
			// 0
			"2222666677" +
					"2444667777" +
					"4444666777" +
					"4444666677" +
					"3334555577" +
					"3335555520" +
					"3334555500" +
					"3332111000" +
					"2221111000" +
					"2211111000"
			,
			// 1
			"7776333333" +
					"7766333223" +
					"7766663222" +
					"7756662222" +
					"7755551111" +
					"7755551111" +
					"6645510000" +
					"6445511200" +
					"4444441000" +
					"4444232000"
			,
			// 2
			"555555554222220" +
					"555555552222221" +
					"777555552111111" +
					"777566661111111" +
					"777666661111111" +
					"777776660011111" +
					"777766660000011" +
					"777766660000022" +
					"777766660000022" +
					"477766660000022" +
					"445522220000022" +
					"445522223333333" +
					"445433333333333" +
					"445444444433333" +
					"444444444433333"
			,
			// 3
			"6666666533111111" +
					"6666666631111111" +
					"6666666611111111" +
					"6666666611111111" +
					"7777777600000000" +
					"7777777700000000" +
					"7777777700000000" +
					"7777777700000000" +
					"7555444433332111" +
					"5555444433332222" +
					"5555444433332222" +
					"5555444433332222" +
					"5555444433332222" +
					"5555444433322222" +
					"5555444433322222" +
					"5555444433322222"
			,
			// 4:190
			"1110000000012222222" +
					"1110000000012222222" +
					"1120000000012222222" +
					"1220000000011122322" +
					"1222000000011113323" +
					"2221000111111111333" +
					"3331000111223311333" +
					"3332111123333311333" +
					"3323311133335555333" +
					"2226663333355555333" +
					"2246444555555555556" +
					"4446445555555556666" +
					"4444444455555566677" +
					"4444444655555577777" +
					"4444466645556677777" +
					"4444466645666777777" +
					"4444466667777777777" +
					"4446666666777777777" +
					"4666666666777777777"
			,
			// 5:114
			"10000011122223333333" +
					"10000011122222222333" +
					"10000011222222222333" +
					"10000011222222222333" +
					"00000011222222222333" +
					"00000011222222222333" +
					"00000011223333333333" +
					"00000033333333333333" +
					"00000055433344444444" +
					"11117766544444444444" +
					"11117766554444444444" +
					"11117766556444444444" +
					"11116666666444444444" +
					"11116666666445555555" +
					"11116666677775555555" +
					"11136666677775555555" +
					"11156666677775555555" +
					"77777777777765555555" +
					"77777777777765555555" +
					"77777777666666666666"
			,
			// 6:287
			"76666644444444442322" +
					"77666644444444443222" +
					"77766644444444432222" +
					"77776644444444322222" +
					"77777644444444222222" +
					"77777654444433222111" +
					"77777655333333211111" +
					"77777655333333211111" +
					"77777655333333211111" +
					"77777655333333211111" +
					"77777655333333321111" +
					"77776655333333331111" +
					"66666655322222221111" +
					"66675555320022222111" +
					"66655555320000000011" +
					"66655555320000000011" +
					"66655555320000000011" +
					"66655555220000000011" +
					"66655555220000000011" +
					"66655555520000000011"
			,
			// 7:34
			"66633333333333333311" +
					"66666333333333333311" +
					"66666633333333661121" +
					"66666633333334641121" +
					"66666653366644442221" +
					"66666555566544442221" +
					"56566555555544422222" +
					"55555555554444442222" +
					"55555555355444332222" +
					"15555511335544422222" +
					"11111111555544442222" +
					"11010000555542222222" +
					"11000000444442222226" +
					"11000000444442222226" +
					"11100000044447677266" +
					"11110000044647777777" +
					"11110000004667777777" +
					"11110000044777777777" +
					"11100000777777777777" +
					"11000000777777777777"
			,
			// 8:181
			"66667777774442222211" +
					"66667777774442222211" +
					"66667777774444222111" +
					"66667777774443221111" +
					"66667777773333321111" +
					"66667777773333332111" +
					"66666644333333332111" +
					"66666644333333311111" +
					"66666664333333311111" +
					"66666664433333311111" +
					"77777774443321111112" +
					"77777774443321122222" +
					"25555554443321122222" +
					"55555554443321122222" +
					"55555554443321122222" +
					"55555544400000022222" +
					"55555544400000000000" +
					"55555544400000000000" +
					"55555544400000000000" +
					"55555544400000000000"
			,
			// 9:331
			"7777777776666666666666666" +
					"7777777776666666666666666" +
					"7777777776666666666666666" +
					"7777777776666666644444444" +
					"7777777776666666644444444" +
					"7777777776666666622122222" +
					"7777777776666664421111111" +
					"7777777744444442211111111" +
					"7557777744444222111111111" +
					"5555555444444222111111111" +
					"5555555444444222111111111" +
					"5555554444444221111111111" +
					"5555554444422221111111111" +
					"5555554444442211111111111" +
					"5555554444442211112200000" +
					"5555554443332222222200000" +
					"5555554433332222222200000" +
					"5555543333332222222000000" +
					"5555433333332222222000000" +
					"5555433333333222220000000" +
					"5555433333333222200000000" +
					"5553333333333222200000000" +
					"5543333333333220000000000" +
					"5543333333333320000000007" +
					"5543333333333320000000007"
			,
			// 10:256
			"222222221000000000111111111" +
					"222222221000000000111111111" +
					"222222221000000000111111111" +
					"222222221000000000111111111" +
					"222222221000000000111111111" +
					"222222222000000000111111111" +
					"222222222000000000111111111" +
					"222222222000000000111111111" +
					"222222222000000000111111111" +
					"222333333000013333336666666" +
					"223333333000013333336666666" +
					"223333333001113333335666666" +
					"223333333333333333335666666" +
					"223333333466665333335555555" +
					"223333333666666666555555555" +
					"223333333666666666555555555" +
					"333333333666666666555555555" +
					"444444444666666666555555555" +
					"444444444777777777666655555" +
					"444444444777777777666655555" +
					"444444444777777777666655555" +
					"444444444777777777666655555" +
					"444444444677777777666655555" +
					"444444444777777777777655555" +
					"444444444777777777777655555" +
					"444444444777777777777655555" +
					"444444444777777777777655555"
			,
			// 11:204
			"333333355555543334444444477777" +
					"555552355555543334444444477777" +
					"555555555555543334444444477777" +
					"555555555555543344444444477777" +
					"555555555555543344444444477777" +
					"555555555555543344444444477777" +
					"555555555555433344444444477777" +
					"555555550000022222344444777777" +
					"555555550000022222344444777777" +
					"555555550000022222344444777777" +
					"555555550000002222344444777777" +
					"322222000000002222344444777777" +
					"322222000000002222344444777777" +
					"332222000000002222344444777777" +
					"333222000000002222444444777777" +
					"333322000000000000644444666666" +
					"333333000000000000666666666666" +
					"333333333330000000666666666666" +
					"333333333330000000666666666666" +
					"333333333220000000666666666666" +
					"333333332220000000666666666666" +
					"333333332220000000666666666666" +
					"333333331111111111666666666666" +
					"222233331111111111666666666666" +
					"222223331111111111677777776666" +
					"222222221111111111677777776666" +
					"222222221111111111777777771111" +
					"222222221111111111777777771111" +
					"222222221111111111111111111111" +
					"222222221111111111111111111111"
			,
			// 12:121
			"111111111111111111111111111111" +
					"111111111111111111111111111111" +
					"111111111111111111111111111111" +
					"333333333333331111222222222111" +
					"333333333333331111222222222111" +
					"333333333333321111222222220221" +
					"333555555555555555555555000222" +
					"333555555555555555555555000222" +
					"333555555555555555555555000222" +
					"333552666666666666667555000222" +
					"333552666666666666677555000222" +
					"333552666666666666677555000222" +
					"333222666777777777777555000222" +
					"333222666777777777777555000222" +
					"333222666777777777777555000222" +
					"333222666777777777777555000222" +
					"333222666777777777777555000222" +
					"333222666777777777777555000222" +
					"333222666777777777777555000333" +
					"333222666777777777777555000344" +
					"333222666777777777777555000444" +
					"333222666666666666666555000444" +
					"333222666666666666666555000444" +
					"333223666666666666666655000444" +
					"333223210000000000000000000444" +
					"333223210000000000000000000444" +
					"333223210000000000000000000444" +
					"444444444444444444444444444444" +
					"444444444444444444444444444444" +
					"444444444444444444444444444444"
			,
			// 13:69
			"111100000000000000666666666666" +
					"111100000000000000666666666666" +
					"110000000000000000006666666666" +
					"110000000000000000006666666666" +
					"111100000000000000666666666666" +
					"111100000000000000666666666666" +
					"111100110000006533333366666666" +
					"111100110000006533333366666666" +
					"111133333300555555555555555566" +
					"111133333300555555555555555566" +
					"111111113332224444555555555566" +
					"111111113332224444555555555566" +
					"111111222222224455555555555566" +
					"111111222222224455555555555566" +
					"111111112233334445555555555566" +
					"111111112233334455555555555566" +
					"111111112222222255555577777766" +
					"111111112222222255555577777766" +
					"111111222222222222777777777766" +
					"331111222222222222777777777766" +
					"333311222222222222774477777767" +
					"333322222222222222774477777777" +
					"333322222222444444444467777777" +
					"333322222222444444444467777777" +
					"333333332244444444444477777777" +
					"333333332244444444444477777777" +
					"333333333344444444444477777777" +
					"333333333344444444444477777777" +
					"333333333344444444444477777777" +
					"333333333344444444444477777777"
			,
			// 14:68
			"77771111111111111111111111111222222" +
					"77711111111111111001000000002222222" +
					"77771010000000000000000000002222222" +
					"77770000000000000000000000002222222" +
					"77770700000000000000000002222222222" +
					"77777770000000000000000022222222222" +
					"77777777000000000000000002222234344" +
					"77777777000000000000000000003334443" +
					"77777111110000000011100003333333344" +
					"77771111110000011111111333333333344" +
					"77777111111100011111113333333333333" +
					"77777666111100011111123333333333333" +
					"76666666111111111111323333333333333" +
					"66666666661111111113333333333333333" +
					"66666666661111111111133333333333333" +
					"66666666661111111114443333333333333" +
					"66666666661111111444444433333333333" +
					"66666666661111111144444433344333333" +
					"66666666661116111144443333344333333" +
					"66666666666666411444444444444333333" +
					"66666666666744444444444444444333334" +
					"66666666664744444445554755777333444" +
					"66666666774555755445555555555535444" +
					"66666667777555555555555555555555544" +
					"66666667775555555555555555555544444" +
					"66666777775555555555555555555544444" +
					"66677777755544555555555555555544444" +
					"66677777555542555555555555555544444" +
					"66777775552222222225555555522444444" +
					"66777775772222222225555555522444444" +
					"66777777772222222255555555224444444" +
					"66777777777722222222255222224444444" +
					"66777777777722222222222222224444444" +
					"66777777777722222222222222222444444" +
					"66777777777222222222222222222444444"
			,
			// 15:26
			"6666666666666666666666666666666666666666" +
					"6666666666666666666666666666666666666666" +
					"6666666666666666666666666666666666666666" +
					"6666666666666666666666666666666666666666" +
					"6666666666666667777777777777777777777777" +
					"7777777777777777777777777777777777777777" +
					"7777777777777777777777777777777777777777" +
					"7777777777777777777777777777777777777777" +
					"7777777777777777777777777777777777777777" +
					"6666666666666666666666666777777777777777" +
					"5555555555555555555555555555555555555555" +
					"5555555555555555555555555555555555555555" +
					"5555555555555555555555555555555555555555" +
					"5555555555555555555555555555555555555555" +
					"5555555555555555555555555555555555555555" +
					"4444444444444444444444444444444444444444" +
					"4444444444444444444444444444444444444444" +
					"4444444444444444444444444444444444444444" +
					"4444444442222222222222222222222222222222" +
					"2222222222222222222222222222222222222222" +
					"2222222222222222222222222222222222222222" +
					"2222211111111111111112222222222222222222" +
					"2222222000000000000000000000000000000000" +
					"0000000000000000000000000000000000000000" +
					"0000000000000000000000000000000000000000" +
					"0000000000000000000000000000000000000000" +
					"0000000000000000000000000000000000000000" +
					"1111111111111111111111111111111110000000" +
					"1111111111111111111111111111111111111111" +
					"1111111111111111111111111111111111111111" +
					"1111111111111111111111111111111111111111" +
					"4444444441111111111111111111111111111111" +
					"4444444444444444444444444444444444444444" +
					"3333333333333333334444444444444444444444" +
					"3333333333333333333333333333333333333333" +
					"3333333333333333333333333333333333333333" +
					"3333333333333333333333333333333333333333" +
					"3333333333333333333333333333333333333333" +
					"3333333333333333333333222222222222222222" +
					"2222222222222222222222222222222222222222"
			,
			// 16
			"3333333333335555555577777777777777777777"+
					"3333333333335555555577777777777777777777"+
					"3333333333335555555557777777777777777777"+
					"3333333333335555555557777777777777777777"+
					"3333333333355555555557777777777777777777"+
					"3333333333355555555557777777777777777777"+
					"5555555555555555555557777777777777777777"+
					"5555555555555555555555555555555777777777"+
					"5555555555555555555555555555555777777766"+
					"5555555555555555555555555555555777777766"+
					"5555444444444444444555555555555777777766"+
					"5555444444444444444444444445555777777766"+
					"5555444444444444444444444444444777777766"+
					"5555444444444444444444444444444777777766"+
					"0000002222234444444444444444444777777766"+
					"0000002222233444444444444444444777777766"+
					"0000002222233344444444444443333366666666"+
					"0000002222233334444444444433333366666666"+
					"0000002222222234444444444333333366666666"+
					"0000002222222234444444443333333366666666"+
					"0000002222222223444444433333333366666666"+
					"0000000222222223444444333333333366666666"+
					"0000000222222223444443333333333366666666"+
					"0000000222222222221113333333333366666666"+
					"0000000222222222221111333333333366666666"+
					"0000000222222222211111333333333366666666"+
					"0000000222222222111111333333333366666666"+
					"0000000222222221111111333333333366666666"+
					"0000000222222211111111110000066666666666"+
					"0000000222222211111111110000066666666666"+
					"0000000222222211111111110000066666666666"+
					"0000000222222211111111110000066666666666"+
					"0000000222222211111111110000066666666666"+
					"0000000222222211111111110000066666666666"+
					"0000000222222211111111111111066666666666"+
					"0000000222222211111111111111166666666666"+
					"0000000222222211111111111111144444411111"+
					"0000022222222211111111111111133444411111"+
					"0000022222222211111111111111133333311111"+
					"0000022222222211111111111111111111111111"
			,
			// 17
			"11111111111111111666666666666666666666665555555555"+
					"11111111111111111666666666666666666666665555555555"+
					"11111111111161111666666666666666666666655555555555"+
					"11111111166661166666666666666666666555555555555555"+
					"11111111166666666666666666666666666555555555555555"+
					"11111111166666666666666666666666666655555555555555"+
					"11111111166666666666666666666666666665555555555555"+
					"11111111116666666666666666666666666665555555555555"+
					"11111111111666666666666666665577777777555555555555"+
					"11111111111666666666666666777777777777555555555555"+
					"12222122221226666666666677777777777777775555555555"+
					"12222222222222266666666667777777777777755555555555"+
					"22222222222222266666666667777777777777777777555555"+
					"22222222222222666666666677777777777777777777555555"+
					"22222222222222666666666667777777777777777777555555"+
					"22222222222226666666626667777777777777777775555555"+
					"22222222222226666662226677777777777777777775555555"+
					"22222222222222222662222227777777777777777755555555"+
					"22222222222222222262222277777777777777777755555555"+
					"12222222222222222222222277777777777777777755553355"+
					"11122222222222222222222277777777777777777555553333"+
					"11112222222222222222222277777777777777777755333333"+
					"11112222222222222222222222257777777777777755333333"+
					"11111122222222222222222225557777777777777733333333"+
					"11111122222222222222222225577777777777777333333333"+
					"11111111122222221122222255556775777777733333333333"+
					"11111111111121111122222255555555567777733633333333"+
					"11111111111111111112222255555555567777777633333333"+
					"11111111111111111112222255555555567777777533333333"+
					"51111111111111111112222555555555557777733333333333"+
					"51100111111111111112222555555555557777333333333333"+
					"50000111111111111112225555555555555557333333333333"+
					"00000111111111111112225445555555555553333333333333"+
					"00000011111111011111155444544444455555533333333333"+
					"00000011111111001114444444544444444444433333333333"+
					"00000000111110001100444444444444444444444333333333"+
					"00000000001110000000044444444444444444444333333333"+
					"00000000001000000004444444444444444444444333333333"+
					"00000000000000000004444444444444444444443333333333"+
					"00000000000000000044444444444444444444443333333333"+
					"00000000000000000044444444444444444444443333333333"+
					"00000000000000000004444444444444444444443333333333"+
					"00000000000000000000444444444444444443333333333333"+
					"00000000000000000000444444444444444443333333333333"+
					"00000000000000000000444444444444444444333333333333"+
					"00000000000000000000444444444444444444333333333333"+
					"00000000000000000000444444444444444444333333333333"+
					"00000000000000000000444444444444444443333333333333"+
					"00000000000000000000044444444444444433333333333333"+
					"00000000000000000000004444444444444433333333333333"
			,
			// 18
			"55555555555555553333333333333677777777777777777777"+
					"55555555555555553333333333337777777777777777777777"+
					"55555555555555553333333333337777777777777777777777"+
					"55555556555555553333333333337777777777777777777777"+
					"55555556555555553333333333337777777777777777777777"+
					"55555556555555553333333333337777777777777777777776"+
					"55555556555555553333333333337777777777777777777776"+
					"55555556555555553333333333337777777777777777777766"+
					"55555556555555553333333333337777777777777777777766"+
					"55555556555555555333333333337777777777777777777644"+
					"55555556555555556655533333337777777777777774444444"+
					"55555556555555556655533333337777777777777774444444"+
					"55555556555555556655533333337777777777777774444444"+
					"55555556555555556666655553337777777777777774444444"+
					"55555556555555556666655553337777777777777774444444"+
					"55555556555555556666655553337777777777777774444444"+
					"22225556555555556666655553337777777777777764444444"+
					"22225556555555556666666666666666666444444444444444"+
					"33325556555555556666666666666666666444444444444444"+
					"33335556555555556666666666666666666444444444444444"+
					"33333331111111111111666666666666666444444444444444"+
					"33333331111111111111666666666666666444444444444444"+
					"33333331111111111111666666666666666444444444444444"+
					"33333331111111111111666666666666666444444444444444"+
					"33333331111111111111666666666666666444444444444444"+
					"33333331111111111111666666666666666444444444444444"+
					"33333331111111111111666666666666644444444444444444"+
					"33333331111111111111666666666666644444444444444444"+
					"33333331111111111111666666666666644444444444444444"+
					"33333331111111111111666666666666644444444444444444"+
					"33333331111111111111666666666666644444444444444444"+
					"33333331100000011111666666666666644444444444422222"+
					"33333331000000011111666666666666644444444444222222"+
					"33333331000000011111366666666666644444444442222222"+
					"33333330000000011111236666666666644444444422222222"+
					"33333330000000000000000111111111111111122222222222"+
					"33333330000000000000000111111111111111122222222222"+
					"33333330000000000000000111111111111111122222222222"+
					"33333333000000000000000111111111111111122222222222"+
					"33333333000000000000000111111111111111122222222222"+
					"33333333000000000000000111111111111111222222222222"+
					"00000000000000000000000111111111111112222222222222"+
					"00000000000000000000012222222222222222222222222222"+
					"00000000000000000000011222222222222222222222222222"+
					"00000000000000000000011122222222222222222222222222"+
					"00000000000000000000011112222222222222222222222222"+
					"00000000000000000000011111222222222222222222222222"+
					"00000000000000000000011111122222222222222222222222"+
					"00000000000000000000011111112222222222222222222222"+
					"00000000000000000000011111111222222222222222222222"
			,
			// 19
			"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"1111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"1111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"1111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"+
					"1111111100000000111111111111111111111111111111111144444444444444444444444444444000000000000000000000"+
					"1111111100000000111111111111111111111111111111111144444444444444444444444444444000000000000000000000"+
					"1111111100000000111111111111111111111111111111111444444444444444444444444444444000000000000000000000"+
					"1111111100000000111111111111111111111111111111114444444444444444444444444444444000000000000000000000"+
					"1111111100000000111111111111111111111111111111144444444444444444444444444444444000000000000000000000"+
					"1111111100000000111111111111111111111111111111444444444444444444444444444444444000000000000000000000"+
					"1111111100000000000111111111111111111111111111114444444444444444444444444444444444444444444444444444"+
					"1000000000000000000111111111111111111111111111114444444444444444444444444444444444444444444444444444"+
					"1000000000000000000111111111111111111111111111114444444444444444444444444444444444444444444444444444"+
					"1000000000000000000011111111111111111111111111114444444444444444444444444444444444444444444444444444"+
					"1110000000000000000011111111111111111111111111114444444444444444444444444444444444444444444444444444"+
					"1110000000000000000011111111111111111111111111114444444444444444444444444444444444444444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444444444444444444444444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444444444444444444444444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444444444444444444444444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444444444444444444444444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444444444444444444444444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444444455555555555555444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444444555555555555555444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444445555555555555555444444444444444"+
					"1333333333333333333311111111111111111111111111111444444444444444444455555555555555555444444444444444"+
					"3333333333333333333311111111111111111111111111111444444444444444444555555555555555555444444444444444"+
					"3333333333333333333311111111111111111111111111111444444444444444445555555555555555555444444444444444"+
					"3333333333333333333311111111111111111111111111111444444444444444455555555555555555555444444444444444"+
					"3333333333333333333333333111111111111111111111111444444444444444555555555555555555555444444444444444"+
					"3333333333333333333333333333333331111111111111111444444444444445555555555555555555555444444444444444"+
					"3333333333333333333333333333333333111111111111111444444444444555555555555555555555555444444444444444"+
					"3333333333333333333333333333333333111111111111111444444444445555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444444455555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444444555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444445555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444455555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555555555555555555555555555555"+
					"3333333333333333333333333333333333111111111111111444444555555555555555555542222222221111111111111111"+
					"3333333333333333333333333333333333311111111111111444444555555555555555555542222222222222222222222222"+
					"3333333333333333333333333333333333311111111111111444445655555555555555555542222222222222222222222222"+
					"3333333333333333333333333333333333311111111111111444455666666666666666655422222222222222222222222222"+
					"3333333333333333333333333333333333311111111111111444555666666666666666655422222222222222222222222222"+
					"3333333333333333333333333333333333311111111111111445555666666666666666655422222222222222222222222222"+
					"3333333333333333333333333333333333311111111111111555555666666666666666655422222222222222222222222222"+
					"3333333333333333333333333333333333311111111111114666666666666666666666655422222222222222222222222222"+
					"3333333333333333333333333333333333311111111111145666666666666666666666655422222222222222222222222222"+
					"3333333333333333333333333333555333311111111111455666666666666666666666655422222222222222222222222222"+
					"3333333333333333333333333333555333311444444444555666666666666666666666655422222222222222222222222222"+
					"3333333333333333333333333334555333311555555555555666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555333311666666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555333311666666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555544666666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555555666666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555566666666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555556666666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555555666666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555555566666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555555556666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555555555666666666666666666666666666666655422222222222222222222222222"+
					"7777777777777777555555555555555555777777666666666666666666666666666666654222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666654222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666654222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666654222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666654222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666654222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666654222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777666666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777766666666666666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777777777777776666666666666666666655222222222222222222222222222"+
					"7777777777777777777777777777777777777777777777777776666666666666666666655522222222222222222222222222"+
					"7777777777777777777777777777777777777777777777777776666666666666666666655522222222222222222222222222"+
					"7777777777777777777777777777777777777777777777777776666666666666666666655522222222222222222222222222"+
					"7777777777777777777777777777777777777777777777777776666666666666666666655522222222222222222222222222"+
					"7777777777777777777777777777777777777777777777777777666666666666666666655522222222222222222222222222"
	};

	public static void main(String[] args) throws Exception
	{
		long S = System.currentTimeMillis();
		is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());
		out = new PrintWriter(System.out);
		
		solve();
		out.flush();
		long G = System.currentTimeMillis();
		tr(G-S+"ms");
		System.err.println("time="+(G-S)+"ms");
	}
	
	private static byte[] inbuf = new byte[1024];
	static int lenbuf = 0, ptrbuf = 0;
	
	private static int readByte()
	{
		if(lenbuf == -1)throw new InputMismatchException();
		if(ptrbuf >= lenbuf){
			ptrbuf = 0;
			try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
			if(lenbuf <= 0)return -1;
		}
		return inbuf[ptrbuf++];
	}
	
	private static boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }
	private static int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }
	
	private static char[] ns(int n)
	{
		char[] buf = new char[n];
		int b = skip(), p = 0;
		while(p < n && !(isSpaceChar(b))){
			buf[p++] = (char)b;
			b = readByte();
		}
		return n == p ? buf : Arrays.copyOf(buf, p);
	}
	
	private static char[][] nm(int n, int m)
	{
		char[][] map = new char[n][];
		for(int i = 0;i < n;i++)map[i] = ns(m);
		return map;
	}

	private static int[][] nmi(int n, int m)
	{
		int[][] map = new int[n][];
		for(int i = 0;i < n;i++)map[i] = na(m);
		return map;
	}
	
	private static int[] na(int n)
	{
		int[] a = new int[n];
		for(int i = 0;i < n;i++)a[i] = ni();
		return a;
	}
	
	private static int ni()
	{
		int num = 0, b;
		boolean minus = false;
		while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
		if(b == '-'){
			minus = true;
			b = readByte();
		}
		
		while(true){
			if(b >= '0' && b <= '9'){
				num = num * 10 + (b - '0');
			}else{
				return minus ? -num : num;
			}
			b = readByte();
		}
	}
	
	private static void tr(Object... o) { if(INPUT.length() != 0)System.out.println(Arrays.deepToString(o)); }
}
